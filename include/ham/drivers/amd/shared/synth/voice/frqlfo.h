//Copyright 2025-Present riplin

#pragma once

#include <ham/drivers/amd/shared/synth/data.h>
#include <ham/drivers/amd/shared/synth/voice/vocbase.h>

namespace Ham::Amd::Shared::Synthesizer::Voice
{

namespace Register
{
    enum
    {
        FrequencyLfo = 0x17,
    };
}

// SFLFOI—Synthesizer Frequency LFO

// Address:    P3XR+5h read/write; index IGIDXR=17h write or IGIDXR=97h read; voice
//             index SVSR=(00h through 1Fh)

// Default: 00h

// This register contains a value generated by the LFO generator used to modify the frequency
// of a voice (vibrato effect). When SGMI[0] is Low, SFLFOI is held to the default value.

// +------------+------------+------------+------------+------------+------------+------------+------------+
// | Bit 7      | Bit 6      | Bit 5      | Bit 4      | Bit 3      | Bit 2      | Bit 1      | Bit 0      |
// +------------+------------+------------+------------+------------+------------+------------+------------+
// | LFO Frequency Value                                                                                   |
// |                                                                                                       |
// +------------+------------+------------+------------+------------+------------+------------+------------+

// Bits 7–0:   LFO Frequency Value.

// Note: All bits in this register are self-modifying.

typedef Indexed::Register8_t FrequencyLfo_t;
namespace FrequencyLfo
{

    inline FrequencyLfo_t Read(Register_t baseAddress)
    {
        return Data::Read8High(baseAddress, uint8_t(Register::FrequencyLfo) + uint8_t(Register::BaseRead));
    }

    inline void Write(Register_t baseAddress, FrequencyLfo_t value)
    {
        Data::Write8High(baseAddress, uint8_t(Register::FrequencyLfo) + uint8_t(Voice::Register::BaseWrite), value);
    }

}

}