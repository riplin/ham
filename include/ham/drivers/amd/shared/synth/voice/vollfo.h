//Copyright 2025-Present riplin

#pragma once

#include <ham/drivers/amd/shared/synth/data.h>
#include <ham/drivers/amd/shared/synth/voice/vocbase.h>

namespace Ham::Amd::Shared::Synthesizer::Voice
{

namespace Register
{
    enum
    {
        VolumeLfo = 0x18,
    };
}

// SVLFOI—Synthesizer Volume LFO

// Address:    P3XR+5h read/write; index IGIDXR=18h write or IGIDXR=98h read; voice
//             index SVSR=(00h through 1Fh)

// Default: 00h

// This register contains a value generated by the LFO generator used to modify the volume
// of a voice. When the Enhanced Mode bit of the Synthesizer Global Mode register (SGMI[0])
// is Low, SVLFOI is held to the default value.

// +------------+------------+------------+------------+------------+------------+------------+------------+
// | Bit 7      | Bit 6      | Bit 5      | Bit 4      | Bit 3      | Bit 2      | Bit 1      | Bit 0      |
// +------------+------------+------------+------------+------------+------------+------------+------------+
// | Volume LFO                                                                                            |
// |                                                                                                       |
// +------------+------------+------------+------------+------------+------------+------------+------------+

// Bits 7–0:   Volume LFO.

// Note: All bits in this register are self-modifying.

typedef Indexed::Register8_t VolumeLfo_t;
namespace VolumeLfo
{

    inline VolumeLfo_t Read(Register_t baseAddress)
    {
        return Data::Read8High(baseAddress, uint8_t(Register::VolumeLfo) + uint8_t(Register::BaseRead));
    }

    inline void Write(Register_t baseAddress, VolumeLfo_t value)
    {
        Data::Write8High(baseAddress, uint8_t(Register::VolumeLfo) + uint8_t(Voice::Register::BaseWrite), value);
    }

}

}